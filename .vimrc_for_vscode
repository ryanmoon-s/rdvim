let mapleader=";"

" 1  2  3                    -
"  q  w  e  r  t    u    o  p  [  ]
"   a  s  d  f    h  j  k  l
"    z     c  v  b  n  m  ,  .  /

" 1 2 / 3       - buffer switch / widen
" -             - buffer delete
" q w           - :q :w
" e             - new file
" r             - rotate window    
" t             - insert not exists \n words into next line
" o p           - close other win / close other buf
" [1 / [2 / [3  - make vim session
" ]1 / ]2 / ]3  - load vim session
" a             - jump between .h and .cpp
" s             - 
" d u b f       - turn pages
" h j k l       - jump to another win
" z             - quickmenu
" c             - coc.nvim quickfix
" v             - :Git blame; preview
" n m           - nerd taglist
" ,             - :noh
" /             - produce a bak line

" Q             - :q!
" J             - J J (only in cpp)
 
" ==== other ===========================
" <c-p>         - fzf files
" <c-c>         - inner terminal

" E             - $
" ,             - brackets match
" tm            - insert time
" mm            - insert lorem
" 'j            - next git hunk
" 'k            - prev git hunk
" gw gf         - ack word / ack file
" tg gt gr      - ctag / go to / go return
" g=            - align with =    (only in visual mode)
" g/            - align with //   (only in visual mode)
" gcc           - (un)comment single line
" gc            - (un)comment a block

" ==== VIM Config T ==================================================
" 点亮光标所在行列
set cursorline
set cursorcolumn
" 插件高度 main for ycm
set pumheight=25
" 退格可以删除：自动缩进、之前插入的、跨行
set backspace=indent,start,eol
" o O <CR> 时复制上一行的缩进格式
set autoindent
" c-style indent
set cindent
set cinoptions=g-1
" 不产生交换文件
set nobackup
" 行号 :no nu 取消
set number
" 命令保存的条数
set history=50
" 显示鼠标位置
set ruler
" 显示未完成的命令
set showcmd
"设置非兼容vi模式
set nocompatible
" 不产生.swp文件
set noswapfile
" <Table> 长度
set tabstop=4
" 缩进偏移量
set shiftwidth=4
" 智能缩进
set smartindent
" 显示匹配的括号
set showmatch
" 把<Table>替换成等量的空格
set expandtab
" 指定何时启动选择模式，而不是可视模式
set selectmode=mouse,key
" 选择模式
set selection=exclusive
" set modeline
set modeline
" 开启语义分析
syntax enable
" 语法高亮
syntax on
" 不显示打开文件时的提示
set shortmess=atI
" 不显示底部的 --插入-- 等模式文字
set noshowmode
" 关闭折叠代码功能 大文件打开所有折叠 卡顿
set nofoldenable

" vim编码方式，加载文件时自动转换成此编码打开
set encoding=utf-8                                                      
" 文件编码方式，探测到文件类型type后，将设为type；保存文件时自动转换此编码保存；新文件以此编码保存
set fileencoding=utf-8                                                  
" 以这些类型来探测文件编码；探测失败则以encoding为准；自动探测更好
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1 

" 开启文件类型侦测
filetype on
" 根据侦测到的不同类型加载对应的插件
filetype plugin on
" 根据侦测到的不同类型采用不同的缩进格式
filetype indent on

" 搜索关键词高亮
set hlsearch
" 增量搜索 increase search 边输入边搜索
set incsearch
" 搜索时大小写不敏感
set ignorecase " 设置默认大小写不敏感查找
set smartcase  " 如果有大写字母，则切换到大小写敏感查找

" ==== map T (快捷键) ================================================
" ==== ban map T =======================
" 只是禁用按键触发 map里面编码触发是可以的
" 禁用快捷键 需要shift+ 才能按出的
noremap R <nop>
noremap Q <nop>
noremap T <nop>
noremap S <nop>
noremap F <nop>
noremap J <nop>
noremap Z <nop>
noremap B <nop>
" noremap E <nop>
noremap W <nop>
noremap ~ <nop>
noremap ! <nop>
noremap @ <nop>
noremap ^ <nop>
noremap & <nop>
noremap ( <nop>
noremap ) <nop>
noremap _ <nop>
noremap # <nop>
noremap ? <nop>

" 直接按出的 还可以用来组合其它快捷键 
" noremap t <nop>
noremap q <nop>
noremap " <nop>
noremap \ <nop>
noremap . <nop>
noremap - <nop>

" ==== file opention map T =============
" 关闭当前窗口
nnoremap <Leader>q :q <CR>
" 关闭当前窗口外的所有窗口
nnoremap <leader>o :only <CR>
" 关闭当前buf外的所有buf
map <Leader>p :call BufCloseOthers() <CR>
" 保存
nnoremap <Leader>w :w <CR>
" 不保存强制退出
nnoremap <Leader>Q :q! <CR>
" 快速切换头/源文件 需要a.vim插件支持
nnoremap <Leader>a :A <CR>
" 打开文件
nnoremap <Leader>e :e <Space>

" ==== other map T =====================
" 去除搜索高亮
nnoremap <Leader>, :noh <CR>
" 括号匹配
nnoremap , %

" 输入括号时 括号匹配 ESC光标会向前移一格
inoremap ( ()<ESC>i
inoremap { {}<ESC>i
inoremap [ []<ESC>i
inoremap ' ''<ESC>i
inoremap " ""<ESC>i

" 将当前行生成一个注释的副本
nmap <Leader>/ yy P gcc j

" 将复制的没有换行符的内容 插入到下一行
nmap <Leader>t o<ESC>p

" 使用ctrl c,v实现vim之间的复制粘贴 非mac os实用
vnoremap <C-c> :w! ~/.vim/.clipboard.txt     <CR>
nnoremap <C-v> <Esc>:r ~/.vim/.clipboard.txt <CR>

" 会话 记录当前vim所有状态;   使用tmux代替
" vi -> ;]1
" nmap <Leader>[1 :mksession! ~/.session1.vim  <CR>
" nmap <Leader>]1 :source     ~/.session1.vim  <CR>   

" nmap <Leader>[2 :mksession! ~/.session2.vim  <CR>
" nmap <Leader>]2 :source     ~/.session2.vim  <CR>   

" nmap <Leader>[3 :mksession! ~/.session3.vim  <CR>
" nmap <Leader>]3 :source     ~/.session3.vim  <CR>   

" end of line
noremap E $

" 插入 时间
nnoremap tm :call SetTime() <CR> 0
" 插入 lorem 凑位词
nnoremap mm :call Lorem()   <CR> 0

" ==== window map T ====================
" 窗口选择
" h左 l右 k上 j下
nnoremap <leader>h <C-W><C-H>
nnoremap <leader>l <C-W><C-L>
nnoremap <Leader>k <C-W><C-K>
nnoremap <Leader>j <C-W><C-J>

" 窗口交换 针对分屏 依次向后
nnoremap <Leader>r <ESC><C-W>r

" 翻页
let g:smoothie_enabled = 0 " smoothie翻页顺滑插件开关
" nmap <Leader>f <C-f>
" nmap <Leader>b <C-b>
" nmap <Leader>u <C-u> 
" nmap <Leader>d <C-d>

" ==== plug map T ======================
" accelerated-jk 插件  加快jk操作 
nmap j <Plug>(accelerated_jk_gj)
nmap k <Plug>(accelerated_jk_gk)

" eft 插件 高亮f下一个能到达的字母 且尽量是单词首尾
nmap f <Plug>(eft-f)

" ==== autocmd T =====================================================
" c++ 花括号 函数/类 格式化  autocmd优先于imap
autocmd FileType cpp inoremap { {<CR>}<ESC>kA<CR>
" 非以上类型 如 vector<int> v{1, 2}; 
" 光标放到最上一行 - 连续将后面两行移上来
autocmd FileType cpp nnoremap <Leader>J J J

" 新建文件 自动插入文件头 .cpp .c .h .sh .java .go
" autocmd BufNewFile *.cpp,*.[ch],*.sh,*.Java,*.go exec ":call SetTitle()"

" 新建文件后 自动定位到文件末尾
autocmd BufNewFile * normal G

" 自动切换当前文件的workspace; ack时就可以找到此文件目录下的东西了 
autocmd BufEnter * silent! lcd %:p:h

" vim-commentary插件 注释针对不同语言的注释方法
autocmd FileType cpp set commentstring=//\ %s
autocmd FileType proto set commentstring=//\ %s
autocmd FileType vim set commentstring=\"\ %s
autocmd FileType shell set commentstring=#\ %s

" 进入窗口高亮 todo TODO
autocmd WinEnter,VimEnter * :silent! call matchadd('todo', 'TODO', -1)
autocmd WinEnter,VimEnter * :silent! call matchadd('todo', 'todo', -1)

" 只剩下help/quickfix/nerd/tag_list等等窗口时直接关闭vim
autocmd BufEnter * call CheckLeftBuffers()

" ==== function T ====================================================
func SetTime()
        call append(line("."), "\# ".strftime('%c'))
endfunc

func Lorem()
        call append(line("."), "Lorem ipsum dolor sit amet, consectetur adipisicing elit dolore magna aliqua.")
endfunc

func SetTitle()
    if &filetype == 'sh'
        call setline(1,"\#########################################################################")
        call append(line("."),   "\# File Name:    ".expand("%"))
        call append(line(".")+1, "\# Author:       arashi")
        call append(line(".")+2, "\# mail:         arashi@tencent.com")
        call append(line(".")+3, "\# Created Time: ".strftime("%c"))
        call append(line(".")+4, "\#########################################################################")
        call append(line(".")+5, "\#!/bin/bash")
        call append(line(".")+6, "")
    else
        call setline(1, "/* ************************************************************************")
        call append(line("."),   "> File Name:     ".expand("%"))
        call append(line(".")+1, "> Author:        arashi")
        call append(line(".")+2, "> mail:          arashi@tencent.com")
        call append(line(".")+3, "> Created Time:  ".strftime("%c"))
        call append(line(".")+4, "> Description:   ")
        call append(line(".")+5, " ************************************************************************/")
        call append(line(".")+6, "")
    endif
endfunc

" 关闭当前buf外的所有buf
func! BufCloseOthers()
    let l:currentBufNum = bufnr("%")
    let l:alternateBufNum = bufnr("#")
    for i in range(1,bufnr("$"))
        if buflisted(i)
            if i!=l:currentBufNum 
                execute("bdelete ".i)
            endif
        endif
    endfor
endfunc

" 粘贴复制模式：进入paste模式 取消行号 关闭对齐线
func M_paste_copy()
    set paste
    set nonu
    :GitGutterSignsDisable
	:IndentLinesDisable
endfunc

func M_no_paste_copy()
    set nopaste
    set nu
    :GitGutterSignsEnable
	:IndentLinesEnable
endfunc

" 剩下这些窗口时：直接关闭vim
function! CheckLeftBuffers()
  if tabpagenr('$') == 1
    let i = 1
    while i <= winnr('$')
      if getbufvar(winbufnr(i), '&buftype') == 'help' ||
          \ getbufvar(winbufnr(i), '&buftype') == 'quickfix' ||
          \ exists('t:NERDTreeBufName') &&
          \   bufname(winbufnr(i)) == t:NERDTreeBufName ||
          \ bufname(winbufnr(i)) == '__Tag_List__'
        let i += 1
      else
        break
      endif
    endwhile
    if i == winnr('$') + 1
      qall
    endif
    unlet i
  endif
endfunction

" ==== block T =======================================================

" 重新打开文档时光标回到文档关闭前的位置
if has("autocmd")
 autocmd BufReadPost *
 \ if line("'\"") > 0 && line ("'\"") <= line("$") |
 \ exe "normal g'\"" |
\ endif
endif

" use 256 colors in terminal
" vim theme in tmux ; fix
if !has("gui_running")
    set t_Co=256
    set term=screen-256color
endif

set paste
